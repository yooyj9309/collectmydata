{{ $service_name := "exchangemock" }}

{{ $service_http_port := "18082" }}

{{ $sidecar_tag := "eef2d431b779bcaa67b4708c25a04416894eb2aa" }}
{{ $sidecar_port_for_internal := "8081" }}

{{ $graceful_shutdown_timeout_sec := "30" }}
{{ $sidecar_graceful_shutdown_timeout_sec := "31" }}
{{ $telegraf_graceful_shutdown_timeout_sec := "41" }}

{{ $telegraf_tag := "1.11.5" }}

{{ $env := .Env.ENV }}
{{ $sub_env_id := .Env.SUB_ENV_ID }}

{{ assert (ne .Env.IMAGE_TAG "") }}

{{ $no_sub_env_id_envs := slice "production" "staging" }}
{{ if has $no_sub_env_id_envs $env }}
  {{ assert (eq $env $sub_env_id) }}
{{ end }}

{{ $namespace := $env }}

# /health
# /invest/accounts/*
# /bank/irps/*
# /invest/irps/*
{{ $sidecar_normalized_path_regexps := "^/health$,^.*/invest/accounts/*$,^.*/bank/irps/*$,^.*//invest/irps/*$" }}

# mock server 는 staging 에만 배포됩니다.
# staging db
{{ $collectmydata_mock_db_password := getenv "STG_COLLECTMYDATA_MOCK_DB_PASSWORD" }}

{{ if ne $env $sub_env_id }}
  {{ $namespace = join (slice $env $sub_env_id) "-" }}
{{ end }}

{{ $mysql_cidr_a := "10.121.1.32/28" }}
{{ $mysql_cidr_b := "10.121.1.48/28" }}
{{ $mysql_cidr_c := "10.121.1.64/28" }}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ $service_name }}-sidecar-telegraf
  namespace: {{ $namespace }}
  labels:
    app: {{ $service_name }}
data:
  telegraf.conf: |
    [global_tags]

    [agent]
      interval = "10s"
      round_interval = true
      metric_batch_size = 1000
      metric_buffer_limit = 10000
      collection_jitter = "0s"
      flush_interval = "10s"
      flush_jitter = "0s"
      precision = ""
      hostname = ""
      omit_hostname = false

    [[outputs.influxdb]]
      urls = ["http://influxdb-service.{{ $namespace }}.banksalad.in:8086"]
      database = "observability-telegraf"

    [[inputs.statsd]]
      protocol = "udp"
      max_tcp_connections = 250
      tcp_keep_alive = false
      service_address = ":8125"
      delete_gauges = true
      delete_counters = true
      delete_sets = true
      delete_timings = true
      percentiles = [99, 95, 90, 50]
      metric_separator = "."
      parse_data_dog_tags = false
      datadog_extensions = false
      allowed_pending_messages = 10000
      percentile_limit = 1000

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ $service_name }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $service_name }}
spec:
  selector:
    matchLabels:
      app: {{ $service_name }}
  template:
    metadata:
      name: {{ $service_name }}
      labels:
        app: {{ $service_name }}
    spec:
      volumes:
        - name: {{ $service_name }}-sidecar-telegraf-conf
          configMap:
            name: {{ $service_name }}-sidecar-telegraf
            defaultMode: 420
      containers:
        - name: {{ $service_name }}-sidecar-telegraf
          image: telegraf:{{ $telegraf_tag }}
          ports:
            - containerPort: 8125
              protocol: UDP
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 64Mi
          volumeMounts:
            - name: {{ $service_name }}-sidecar-telegraf-conf
              mountPath: "/etc/telegraf"
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                  - sh
                  - "-c"
                  - sleep {{ $telegraf_graceful_shutdown_timeout_sec }} && /usr/sbin/nginx -s quit

        - name: sidecar-for-internal
          image: rainist/sidecar:{{ $sidecar_tag }}
          ports:
            - containerPort: {{ $sidecar_port_for_internal }}
              protocol: TCP
          env:
            - name: SIDECAR_HTTP_PORT
              value: "{{ $sidecar_port_for_internal }}"
            - name: SERVICE_HTTP_HOSTNAME
              value: localhost
            - name: SERVICE_HTTP_PORT
              value: "{{ $service_http_port }}"
            - name: SERVICE_NAME
              value: {{ $service_name }}
            - name: SIDECAR_GRACEFUL_SHUTDOWN_TIMEOUT_MS
              value: "{{ mul $sidecar_graceful_shutdown_timeout_sec 1000 }}"
            - name: ENV
              value: {{ $env }}
            - name: SUB_ENV_ID
              value: {{ $sub_env_id }}
            - name: NAMESPACE
              value: {{ $namespace }}
            - name: PATH_REGEXPS
              value: "{{ $sidecar_normalized_path_regexps }}"
          resources:
            limits:
              cpu: "1"
              memory: 2Gi
            requests:
              cpu: 250m
              memory: 512Mi
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent

        - name: {{ $service_name }}
          image: rainist/{{ $service_name }}:{{ getenv "IMAGE_TAG" }}
          ports:
            - containerPort: {{ $service_http_port }}
              protocol: TCP
          env:
            - name: ENV
              value: {{ $env }}
            - name: SUB_ENV_ID
              value: {{ $sub_env_id }}
            - name: NAMESPACE
              value: {{ $namespace }}
            - name: COLLECTMYDATA_MOCK_DB_PASSWORD
              value: {{ $collectmydata_mock_db_password }}
          resources:
            limits:
              memory: 8Gi
            requests:
              cpu: 300m
              memory: 4Gi
          livenessProbe:
            httpGet:
              path: "/health"
              port: {{ $service_http_port }}
              scheme: HTTP
            initialDelaySeconds: {{ $graceful_shutdown_timeout_sec }}
            timeoutSeconds: 2
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: "/health"
              port: {{ $service_http_port }}
              scheme: HTTP
            initialDelaySeconds: {{ $graceful_shutdown_timeout_sec }}
            timeoutSeconds: 1
            periodSeconds: 3
            successThreshold: 1
            failureThreshold: 2
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: File
          imagePullPolicy: Always
      restartPolicy: Always
      terminationGracePeriodSeconds: {{ mul $graceful_shutdown_timeout_sec 2 }}
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          - name: single-request-reopen
      securityContext: {}
      imagePullSecrets:
        - name: docker-hub-registry-credential
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600

---
kind: HorizontalPodAutoscaler
apiVersion: autoscaling/v1
metadata:
  name: {{ $service_name }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $service_name }}

spec:
  scaleTargetRef:
    kind: Deployment
    name: {{ $service_name }}
    apiVersion: apps/v1
  minReplicas: 2
  maxReplicas: 2
  targetCPUUtilizationPercentage: 60

---
kind: Service
apiVersion: v1
metadata:
  name: {{ $service_name }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $service_name }}
spec:
  ports:
    - name: http-for-internal
      protocol: TCP
      port: 80
      targetPort: {{ $sidecar_port_for_internal }}
  selector:
    app: {{ $service_name }}
  type: ClusterIP
  sessionAffinity: None

---
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: {{ $service_name }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $service_name }}
spec:
  podSelector:
    matchLabels:
      app: {{ $service_name }}
  policyTypes:
  - Egress
  egress:
  - to:
    - ipBlock:
        cidr: {{ $mysql_cidr_a }}
    - ipBlock:
        cidr: {{ $mysql_cidr_b }}
    - ipBlock:
        cidr: {{ $mysql_cidr_c }}
    ports:
    - protocol: TCP
      port: 3306

---
kind: PodDisruptionBudget
apiVersion: policy/v1beta1
metadata:
  name: {{ $service_name }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $service_name }}
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: {{ $service_name }}
