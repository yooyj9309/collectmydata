{{ $service_name := "collectmydataoauth" }}

{{ $service_port := "8081" }}

{{ $sidecar_tag := "096cc53117695d10fa1d86030fd974777d776ac4" }}
{{ $sidecar_port := "8080" }}

{{ $nginx_tag := "1.17.4" }}
{{ $telegraf_tag := "1.11.5" }}

{{ $env := .Env.ENV }}
{{ $sub_env_id := .Env.SUB_ENV_ID }}

{{ $no_sub_env_id_envs := slice "production" "staging" }}
{{ if has $no_sub_env_id_envs $env }}
  {{ assert (eq $env $sub_env_id) }}
{{ end }}

{{ $namespace := $env }}
{{ if ne $env $sub_env_id }}
  {{ $namespace = join (slice $env $sub_env_id) "-" }}
{{ end }}

{{ $ingress_host := "mydata-oauth.staging.banksalad.com" }}

{{ if eq $env "production" }}
  {{ $ingress_host = "mydata-oauth.banksalad.com" }}  #TODO
{{ end }}

{{ $redis_cidr_a := "10.120.251.128/25" }}
{{ $redis_cidr_b := "10.120.252.0/25" }}
{{ $redis_cidr_c := "10.120.252.128/25" }}

{{ if eq $env "production" }}
  {{ $redis_cidr_a = "10.130.251.128/25" }}
  {{ $redis_cidr_b = "10.130.252.0/25" }}
  {{ $redis_cidr_c = "10.130.252.128/25" }}
{{ end }}

{{ $sidecar_normalized_path_regexps := "/ping/health,/v1/mydata-auth/ready,/v1/mydata-auth/authorize"}}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ $service_name }}-sidecar-telegraf
  namespace: {{ $namespace }}
  labels:
    app: {{ $service_name }}
data:
  telegraf.conf: |
    [global_tags]

    [agent]
      interval = "10s"
      round_interval = true
      metric_batch_size = 1000
      metric_buffer_limit = 10000
      collection_jitter = "0s"
      flush_interval = "10s"
      flush_jitter = "0s"
      precision = ""
      hostname = ""
      omit_hostname = false

    [[outputs.influxdb]]
      urls = ["http://influxdb-service.{{ $namespace }}.banksalad.in:8086"]
      database = "observability-telegraf"

    [[inputs.statsd]]
      protocol = "udp"
      max_tcp_connections = 250
      tcp_keep_alive = false
      service_address = ":8125"
      delete_gauges = true
      delete_counters = true
      delete_sets = true
      delete_timings = true
      percentiles = [99, 95, 90, 50]
      metric_separator = "."
      parse_data_dog_tags = false
      datadog_extensions = false
      allowed_pending_messages = 10000
      percentile_limit = 1000

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ $service_name }}-telegraf
  namespace: {{ $namespace }}
data:
  telegraf.conf: |
    [global_tags]

    [agent]
      interval = "10s"
      round_interval = true
      metric_batch_size = 1000
      metric_buffer_limit = 10000
      collection_jitter = "0s"
      flush_interval = "10s"
      flush_jitter = "0s"
      precision = ""
      hostname = ""
      omit_hostname = false

    [[outputs.influxdb]]
      urls = ["http://influxdb-service.{{ $namespace }}.banksalad.in:8086"]
      database = "collect"

    [[inputs.statsd]]
      protocol = "udp"
      max_tcp_connections = 250
      tcp_keep_alive = false
      service_address = ":8126"
      delete_gauges = true
      delete_counters = true
      delete_sets = true
      delete_timings = true
      percentiles = [99, 95, 90, 50]
      metric_separator = "."
      parse_data_dog_tags = false
      datadog_extensions = false
      allowed_pending_messages = 10000
      percentile_limit = 1000

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ $service_name }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $service_name }}
spec:
  selector:
    matchLabels:
      app: {{ $service_name }}
  template:
    metadata:
      creationTimestamp:
      labels:
        app: {{ $service_name }}
    spec:
      volumes:
        - name: {{ $service_name }}-telegraf-conf
          configMap:
            name: {{ $service_name }}-telegraf
            defaultMode: 420
        - name: telegraf-conf
          configMap:
            name: {{ $service_name }}-sidecar-telegraf
            defaultMode: 420
      containers:
        - name: telegraf-for-sidecar
          image: telegraf:{{ $telegraf_tag }}
          ports:
            - containerPort: 8125
              protocol: UDP
          resources:
            limits:
              cpu: 1
              memory: 500Mi
            requests:
              cpu: 500m
              memory: 300Mi
          volumeMounts:
            - name: telegraf-conf
              mountPath: "/etc/telegraf"
          lifecycle:
            preStop:
              exec:
                command:
                  - sh
                  - "-c"
                  - sleep {{ $telegraf_graceful_shutdown_timeout_sec }}
        - name: sidecar-for-internal
          image: rainist/sidecar:{{ $sidecar_tag }}
          ports:
            - containerPort: {{ $sidecar_port }}
              protocol: TCP
          env:
            - name: SIDECAR_HTTP_PORT
              value: "{{ $sidecar_port }}"
            - name: SERVICE_HTTP_HOSTNAME
              value: localhost
            - name: SERVICE_HTTP_PORT
              value: "{{ $service_port }}"
            - name: SERVICE_NAME
              value: {{ $service_name }}
            - name: SIDECAR_GRACEFUL_SHUTDOWN_TIMEOUT_MS
              value: "{{ $graceful_shutdown_timeout_ms }}"
            - name: ENV
              value: {{ $env }}
            - name: SUB_ENV_ID
              value: {{ $sub_env_id }}
            - name: NAMESPACE
              value: {{ $namespace }}
            - name: PATH_REGEXPS
              value: "{{ $sidecar_normalized_path_regexps }}"
          resources:
            limits:
              cpu: "1"
              memory: 2Gi
            requests:
              cpu: 250m
              memory: 512Mi
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
        - name: {{ $service_name }}-telegraf
          image: telegraf:{{ $telegraf_tag }}
          ports:
            - containerPort: 8126
              protocol: UDP
          resources:
            limits:
              cpu: 1
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
            - name: {{ $service_name }}-telegraf-conf
              mountPath: "/etc/telegraf"
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
        - name: {{ $service_name }}
          image: rainist/{{ $service_name }}:{{ getenv "IMAGE_TAG" }}
          ports:
            - containerPort: {{ $service_port }}
              protocol: TCP
          env:
            - name: ENV
              value: {{ $env }}
          resources:
            limits:
              cpu: 1
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 1Gi
          livenessProbe:
            httpGet:
              path: "/actuator/health/liveness"
              port: {{ $service_port }}
              scheme: HTTP
            initialDelaySeconds: 60
            timeoutSeconds: 2
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: "/actuator/health/readiness"
              port: {{ $service_port }}
              scheme: HTTP
            initialDelaySeconds: 20
            timeoutSeconds: 1
            periodSeconds: 3
            successThreshold: 1
            failureThreshold: 2
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: File
          imagePullPolicy: Always
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      imagePullSecrets:
        - name: docker-hub-registry-credential
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 30%
      maxSurge: 30%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600

---
kind: HorizontalPodAutoscaler
apiVersion: autoscaling/v1
metadata:
  name: {{ $service_name }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $service_name }}
spec:
  scaleTargetRef:
    kind: Deployment
    name: {{ $service_name }}
    apiVersion: apps/v1
  minReplicas: {{ if eq $env "production" }} 3 {{ else }} 2 {{ end }}
  maxReplicas: {{ if eq $env "production" }} 6 {{ else }} 2 {{ end }}
  targetCPUUtilizationPercentage: 50

---
kind: Service
apiVersion: v1
metadata:
  name: {{ $service_name }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $service_name }}
spec:
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  selector:
    app: {{ $service_name }}
  type: ClusterIP
  sessionAffinity: None

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{ $service_name }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $service_name }}
spec:
  podSelector:
    matchLabels:
      app: {{ $service_name }}
  policyTypes:
  - Egress
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: auth
    - podSelector:
        matchLabels:
          app: connect
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 18081
    - protocol: TCP
      port: 8080
  - to:
    - ipBlock:
        cidr: {{ $redis_cidr_a }}
    - ipBlock:
        cidr: {{ $redis_cidr_b }}
    - ipBlock:
        cidr: {{ $redis_cidr_c }}
    ports:
    - protocol: TCP
      port: 6379

---
kind: PodDisruptionBudget
apiVersion: policy/v1beta1
metadata:
  name: {{ $service_name }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $service_name }}
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: {{ $service_name }}

---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: {{ $service_name }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $service_name }}
  annotations:
    kubernetes.io/ingress.class: nginx
    ingress.kubernetes.io/service-upstream: "true"
spec:
  rules:
    - host: {{ $ingress_host }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{ $service_name }}
                port:
                  number: 80
