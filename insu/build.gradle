plugins {
	id "org.springframework.boot" version "2.2.8.RELEASE"
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id "jacoco"
}

group = 'com.banksalad.collectmydata'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven {
		name = "GitHubPackages"
		url = uri("https://maven.pkg.github.com/banksalad/**")
		credentials {
			username = System.getenv("GH_USERNAME")
			password = System.getenv("GH_DAAS_PACKAGES_TOKEN")
		}
	}
}

ext {
	collectVersion = "1.1.30.RELEASE"
	idlVersion = "20201125.39749bd.RELEASE"

	camelVersion = "3.2.0"

	// Do not update spring boot version as 2.3.1 (micrometer timer is not working)
	springBootVersion = "2.2.8.RELEASE"

	grpcVersion = "1.30.2"
	grpcSpringBootVersion = "3.5.5"

	slf4jVersion = "1.7.30"
	logbackVersion = "1.2.3"
	lombokVersion = "1.18.12"

	mapstructVersion = "1.3.1.Final"

	// Do not update micrometer version as 1.5.2 before testing
	micrometerVersion = "1.4.0"

	apacheCommonsVersion = "3.10"

	json_path_version = "2.4.0"

	awsSdkVersion = "2.14.21"
}

dependencyManagement {
	imports {
		mavenBom "software.amazon.awssdk:bom:${awsSdkVersion}"
	}
}

dependencies {
	// idl
	implementation("com.banksalad:idl:${idlVersion}")

	// spring
	implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
	implementation("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
	implementation("org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}")

	// grpc
	implementation("io.grpc:grpc-context:${grpcVersion}")
	implementation("io.grpc:grpc-api:${grpcVersion}")
	implementation("io.grpc:grpc-netty:${grpcVersion}")
	implementation("io.grpc:grpc-stub:${grpcVersion}")
	implementation("io.grpc:grpc-protobuf:${grpcVersion}")

	implementation("io.github.lognet:grpc-spring-boot-starter:${grpcSpringBootVersion}")
	testImplementation("io.grpc:grpc-testing:1.30.0")

	// httpclient
	implementation("org.apache.httpcomponents:httpclient:4.5.12")

	// lombok
	compileOnly("org.projectlombok:lombok:${lombokVersion}")
	annotationProcessor("org.projectlombok:lombok:${lombokVersion}")

	// apache commons
	implementation("org.apache.commons:commons-lang3:${apacheCommonsVersion}")

	// DB
	implementation("org.mariadb.jdbc:mariadb-java-client:2.6.0")

	// AWS
	implementation("software.amazon.awssdk:kms:2.14.21")

	// log
	implementation("org.slf4j:slf4j-api:${slf4jVersion}")
	implementation("org.slf4j:jcl-over-slf4j:${slf4jVersion}")
	implementation("ch.qos.logback:logback-classic:${logbackVersion}")

	// logback json
	implementation("ch.qos.logback.contrib:logback-json-classic:0.1.5")
	implementation("ch.qos.logback.contrib:logback-jackson:0.1.5")

	// application monitoring
	implementation("io.micrometer:micrometer-core:${micrometerVersion}")
	implementation("io.micrometer:micrometer-registry-statsd:${micrometerVersion}")

	// kafka
	implementation("org.springframework.kafka:spring-kafka")

	//test
	testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
		exclude group: "org.junit.vintage", module: "junit-vintage-engine"
	}

	testImplementation("commons-io:commons-io:2.6")
	testImplementation("com.h2database:h2")
	testImplementation("org.mockito:mockito-inline:3.1.0")
	testImplementation("com.google.protobuf:protobuf-java-util:3.11.0")
	testImplementation("org.springframework.kafka:spring-kafka-test")
	testImplementation("org.awaitility:awaitility")

	testCompile("org.projectlombok:lombok:${lombokVersion}")
	testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
}

test {
	useJUnitPlatform()
}

jacoco {
	toolVersion = "0.8.5"
}

jacocoTestReport {
	// tests are required to run before generating the report
	dependsOn test
	reports {
		html.enabled true
		xml.enabled true
		csv.enabled true
	}
}
